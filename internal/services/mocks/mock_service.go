// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Study\Avito_Bootcamp\apartment_search_service\internal\services\services.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "apartment_search_service/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthService) CreateUser(user *models.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthServiceMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthService)(nil).CreateUser), user)
}

// GenerateToken mocks base method.
func (m *MockAuthService) GenerateToken(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthServiceMockRecorder) GenerateToken(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthService)(nil).GenerateToken), username, password)
}

// GetUser mocks base method.
func (m *MockAuthService) GetUser(id string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockAuthServiceMockRecorder) GetUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockAuthService)(nil).GetUser), id)
}

// ParseToken mocks base method.
func (m *MockAuthService) ParseToken(accessToken string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", accessToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthServiceMockRecorder) ParseToken(accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthService)(nil).ParseToken), accessToken)
}

// MockHouseService is a mock of HouseService interface.
type MockHouseService struct {
	ctrl     *gomock.Controller
	recorder *MockHouseServiceMockRecorder
}

// MockHouseServiceMockRecorder is the mock recorder for MockHouseService.
type MockHouseServiceMockRecorder struct {
	mock *MockHouseService
}

// NewMockHouseService creates a new mock instance.
func NewMockHouseService(ctrl *gomock.Controller) *MockHouseService {
	mock := &MockHouseService{ctrl: ctrl}
	mock.recorder = &MockHouseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHouseService) EXPECT() *MockHouseServiceMockRecorder {
	return m.recorder
}

// CreateHouse mocks base method.
func (m *MockHouseService) CreateHouse(house *models.House) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHouse", house)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateHouse indicates an expected call of CreateHouse.
func (mr *MockHouseServiceMockRecorder) CreateHouse(house interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHouse", reflect.TypeOf((*MockHouseService)(nil).CreateHouse), house)
}

// GetFlatsByHouseId mocks base method.
func (m *MockHouseService) GetFlatsByHouseId(houseId int32, isModer bool) ([]*models.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlatsByHouseId", houseId, isModer)
	ret0, _ := ret[0].([]*models.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlatsByHouseId indicates an expected call of GetFlatsByHouseId.
func (mr *MockHouseServiceMockRecorder) GetFlatsByHouseId(houseId, isModer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlatsByHouseId", reflect.TypeOf((*MockHouseService)(nil).GetFlatsByHouseId), houseId, isModer)
}

// MockFlatService is a mock of FlatService interface.
type MockFlatService struct {
	ctrl     *gomock.Controller
	recorder *MockFlatServiceMockRecorder
}

// MockFlatServiceMockRecorder is the mock recorder for MockFlatService.
type MockFlatServiceMockRecorder struct {
	mock *MockFlatService
}

// NewMockFlatService creates a new mock instance.
func NewMockFlatService(ctrl *gomock.Controller) *MockFlatService {
	mock := &MockFlatService{ctrl: ctrl}
	mock.recorder = &MockFlatServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlatService) EXPECT() *MockFlatServiceMockRecorder {
	return m.recorder
}

// CreateFlat mocks base method.
func (m *MockFlatService) CreateFlat(flat *models.Flat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlat", flat)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFlat indicates an expected call of CreateFlat.
func (mr *MockFlatServiceMockRecorder) CreateFlat(flat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlat", reflect.TypeOf((*MockFlatService)(nil).CreateFlat), flat)
}

// UpdateStatus mocks base method.
func (m *MockFlatService) UpdateStatus(flatId int32, moderId, status string) (*models.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", flatId, moderId, status)
	ret0, _ := ret[0].(*models.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockFlatServiceMockRecorder) UpdateStatus(flatId, moderId, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockFlatService)(nil).UpdateStatus), flatId, moderId, status)
}

// MockSubscriptionService is a mock of SubscriptionService interface.
type MockSubscriptionService struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionServiceMockRecorder
}

// MockSubscriptionServiceMockRecorder is the mock recorder for MockSubscriptionService.
type MockSubscriptionServiceMockRecorder struct {
	mock *MockSubscriptionService
}

// NewMockSubscriptionService creates a new mock instance.
func NewMockSubscriptionService(ctrl *gomock.Controller) *MockSubscriptionService {
	mock := &MockSubscriptionService{ctrl: ctrl}
	mock.recorder = &MockSubscriptionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionService) EXPECT() *MockSubscriptionServiceMockRecorder {
	return m.recorder
}

// AddSubscriber mocks base method.
func (m *MockSubscriptionService) AddSubscriber(houseId int32, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSubscriber", houseId, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSubscriber indicates an expected call of AddSubscriber.
func (mr *MockSubscriptionServiceMockRecorder) AddSubscriber(houseId, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubscriber", reflect.TypeOf((*MockSubscriptionService)(nil).AddSubscriber), houseId, email)
}

// NotifySubscribers mocks base method.
func (m *MockSubscriptionService) NotifySubscribers(houseId, flatId int32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifySubscribers", houseId, flatId)
}

// NotifySubscribers indicates an expected call of NotifySubscribers.
func (mr *MockSubscriptionServiceMockRecorder) NotifySubscribers(houseId, flatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifySubscribers", reflect.TypeOf((*MockSubscriptionService)(nil).NotifySubscribers), houseId, flatId)
}
