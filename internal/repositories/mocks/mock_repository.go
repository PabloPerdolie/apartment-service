// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Study\Avito_Bootcamp\apartment_search_service\internal\repositories\repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "apartment_search_service/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockUserRepository) Get(email, password string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", email, password)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserRepositoryMockRecorder) Get(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserRepository)(nil).Get), email, password)
}

// GetById mocks base method.
func (m *MockUserRepository) GetById(id string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUserRepositoryMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUserRepository)(nil).GetById), id)
}

// Insert mocks base method.
func (m *MockUserRepository) Insert(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockUserRepositoryMockRecorder) Insert(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUserRepository)(nil).Insert), user)
}

// MockHouseRepository is a mock of HouseRepository interface.
type MockHouseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHouseRepositoryMockRecorder
}

// MockHouseRepositoryMockRecorder is the mock recorder for MockHouseRepository.
type MockHouseRepositoryMockRecorder struct {
	mock *MockHouseRepository
}

// NewMockHouseRepository creates a new mock instance.
func NewMockHouseRepository(ctrl *gomock.Controller) *MockHouseRepository {
	mock := &MockHouseRepository{ctrl: ctrl}
	mock.recorder = &MockHouseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHouseRepository) EXPECT() *MockHouseRepositoryMockRecorder {
	return m.recorder
}

// GetById mocks base method.
func (m *MockHouseRepository) GetById(id int32) (*models.House, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*models.House)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockHouseRepositoryMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockHouseRepository)(nil).GetById), id)
}

// Insert mocks base method.
func (m *MockHouseRepository) Insert(house *models.House) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", house)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockHouseRepositoryMockRecorder) Insert(house interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockHouseRepository)(nil).Insert), house)
}

// MockFlatRepository is a mock of FlatRepository interface.
type MockFlatRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFlatRepositoryMockRecorder
}

// MockFlatRepositoryMockRecorder is the mock recorder for MockFlatRepository.
type MockFlatRepositoryMockRecorder struct {
	mock *MockFlatRepository
}

// NewMockFlatRepository creates a new mock instance.
func NewMockFlatRepository(ctrl *gomock.Controller) *MockFlatRepository {
	mock := &MockFlatRepository{ctrl: ctrl}
	mock.recorder = &MockFlatRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlatRepository) EXPECT() *MockFlatRepositoryMockRecorder {
	return m.recorder
}

// GetFlatsByHouseId mocks base method.
func (m *MockFlatRepository) GetFlatsByHouseId(houseId int32, isModer bool) ([]*models.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlatsByHouseId", houseId, isModer)
	ret0, _ := ret[0].([]*models.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlatsByHouseId indicates an expected call of GetFlatsByHouseId.
func (mr *MockFlatRepositoryMockRecorder) GetFlatsByHouseId(houseId, isModer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlatsByHouseId", reflect.TypeOf((*MockFlatRepository)(nil).GetFlatsByHouseId), houseId, isModer)
}

// Insert mocks base method.
func (m *MockFlatRepository) Insert(flat *models.Flat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", flat)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockFlatRepositoryMockRecorder) Insert(flat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockFlatRepository)(nil).Insert), flat)
}

// UpdateStatus mocks base method.
func (m *MockFlatRepository) UpdateStatus(flatId int32, moderId, status string) (*models.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", flatId, moderId, status)
	ret0, _ := ret[0].(*models.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockFlatRepositoryMockRecorder) UpdateStatus(flatId, moderId, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockFlatRepository)(nil).UpdateStatus), flatId, moderId, status)
}
