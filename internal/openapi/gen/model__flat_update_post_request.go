/*
Тестовое задание для отбора на Backend Bootcamp

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FlatUpdatePostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlatUpdatePostRequest{}

// FlatUpdatePostRequest struct for FlatUpdatePostRequest
type FlatUpdatePostRequest struct {
	// Идентификатор квартиры
	Id     int32   `json:"id"`
	Status *Status `json:"status,omitempty"`
}

type _FlatUpdatePostRequest FlatUpdatePostRequest

// NewFlatUpdatePostRequest instantiates a new FlatUpdatePostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlatUpdatePostRequest(id int32) *FlatUpdatePostRequest {
	this := FlatUpdatePostRequest{}
	this.Id = id
	return &this
}

// NewFlatUpdatePostRequestWithDefaults instantiates a new FlatUpdatePostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlatUpdatePostRequestWithDefaults() *FlatUpdatePostRequest {
	this := FlatUpdatePostRequest{}
	return &this
}

// GetId returns the Id field value
func (o *FlatUpdatePostRequest) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FlatUpdatePostRequest) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FlatUpdatePostRequest) SetId(v int32) {
	o.Id = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *FlatUpdatePostRequest) GetStatus() Status {
	if o == nil || IsNil(o.Status) {
		var ret Status
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlatUpdatePostRequest) GetStatusOk() (*Status, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *FlatUpdatePostRequest) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given Status and assigns it to the Status field.
func (o *FlatUpdatePostRequest) SetStatus(v Status) {
	o.Status = &v
}

func (o FlatUpdatePostRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlatUpdatePostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

func (o *FlatUpdatePostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFlatUpdatePostRequest := _FlatUpdatePostRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFlatUpdatePostRequest)

	if err != nil {
		return err
	}

	*o = FlatUpdatePostRequest(varFlatUpdatePostRequest)

	return err
}

type NullableFlatUpdatePostRequest struct {
	value *FlatUpdatePostRequest
	isSet bool
}

func (v NullableFlatUpdatePostRequest) Get() *FlatUpdatePostRequest {
	return v.value
}

func (v *NullableFlatUpdatePostRequest) Set(val *FlatUpdatePostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFlatUpdatePostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFlatUpdatePostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlatUpdatePostRequest(val *FlatUpdatePostRequest) *NullableFlatUpdatePostRequest {
	return &NullableFlatUpdatePostRequest{value: val, isSet: true}
}

func (v NullableFlatUpdatePostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlatUpdatePostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
