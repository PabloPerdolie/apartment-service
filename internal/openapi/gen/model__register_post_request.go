/*
Тестовое задание для отбора на Backend Bootcamp

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RegisterPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterPostRequest{}

// RegisterPostRequest struct for RegisterPostRequest
type RegisterPostRequest struct {
	// Email пользователя
	Email *string `json:"email" validate:"required,email"`
	// Пароль пользователя
	Password *string   `json:"password" validate:"required,min=8"`
	UserType *UserType `json:"user_type" validate:"oneof=client moderator"`
}

// NewRegisterPostRequest instantiates a new RegisterPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterPostRequest() *RegisterPostRequest {
	this := RegisterPostRequest{}
	return &this
}

// NewRegisterPostRequestWithDefaults instantiates a new RegisterPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterPostRequestWithDefaults() *RegisterPostRequest {
	this := RegisterPostRequest{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *RegisterPostRequest) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterPostRequest) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *RegisterPostRequest) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *RegisterPostRequest) SetEmail(v string) {
	o.Email = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *RegisterPostRequest) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterPostRequest) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *RegisterPostRequest) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *RegisterPostRequest) SetPassword(v string) {
	o.Password = &v
}

// GetUserType returns the UserType field value if set, zero value otherwise.
func (o *RegisterPostRequest) GetUserType() UserType {
	if o == nil || IsNil(o.UserType) {
		var ret UserType
		return ret
	}
	return *o.UserType
}

// GetUserTypeOk returns a tuple with the UserType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterPostRequest) GetUserTypeOk() (*UserType, bool) {
	if o == nil || IsNil(o.UserType) {
		return nil, false
	}
	return o.UserType, true
}

// HasUserType returns a boolean if a field has been set.
func (o *RegisterPostRequest) HasUserType() bool {
	if o != nil && !IsNil(o.UserType) {
		return true
	}

	return false
}

// SetUserType gets a reference to the given UserType and assigns it to the UserType field.
func (o *RegisterPostRequest) SetUserType(v UserType) {
	o.UserType = &v
}

func (o RegisterPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.UserType) {
		toSerialize["user_type"] = o.UserType
	}
	return toSerialize, nil
}

type NullableRegisterPostRequest struct {
	value *RegisterPostRequest
	isSet bool
}

func (v NullableRegisterPostRequest) Get() *RegisterPostRequest {
	return v.value
}

func (v *NullableRegisterPostRequest) Set(val *RegisterPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterPostRequest(val *RegisterPostRequest) *NullableRegisterPostRequest {
	return &NullableRegisterPostRequest{value: val, isSet: true}
}

func (v NullableRegisterPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
