/*
Тестовое задание для отбора на Backend Bootcamp

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RegisterPost200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterPost200Response{}

// RegisterPost200Response struct for RegisterPost200Response
type RegisterPost200Response struct {
	// Идентификатор пользователя
	UserId *string `json:"user_id,omitempty"`
}

// NewRegisterPost200Response instantiates a new RegisterPost200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterPost200Response() *RegisterPost200Response {
	this := RegisterPost200Response{}
	return &this
}

// NewRegisterPost200ResponseWithDefaults instantiates a new RegisterPost200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterPost200ResponseWithDefaults() *RegisterPost200Response {
	this := RegisterPost200Response{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *RegisterPost200Response) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterPost200Response) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *RegisterPost200Response) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *RegisterPost200Response) SetUserId(v string) {
	o.UserId = &v
}

func (o RegisterPost200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterPost200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	return toSerialize, nil
}

type NullableRegisterPost200Response struct {
	value *RegisterPost200Response
	isSet bool
}

func (v NullableRegisterPost200Response) Get() *RegisterPost200Response {
	return v.value
}

func (v *NullableRegisterPost200Response) Set(val *RegisterPost200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterPost200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterPost200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterPost200Response(val *RegisterPost200Response) *NullableRegisterPost200Response {
	return &NullableRegisterPost200Response{value: val, isSet: true}
}

func (v NullableRegisterPost200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterPost200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
