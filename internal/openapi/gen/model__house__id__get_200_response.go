/*
Тестовое задание для отбора на Backend Bootcamp

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the HouseIdGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HouseIdGet200Response{}

// HouseIdGet200Response struct for HouseIdGet200Response
type HouseIdGet200Response struct {
	Flats []Flat `json:"flats"`
}

type _HouseIdGet200Response HouseIdGet200Response

// NewHouseIdGet200Response instantiates a new HouseIdGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHouseIdGet200Response(flats []Flat) *HouseIdGet200Response {
	this := HouseIdGet200Response{}
	this.Flats = flats
	return &this
}

// NewHouseIdGet200ResponseWithDefaults instantiates a new HouseIdGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHouseIdGet200ResponseWithDefaults() *HouseIdGet200Response {
	this := HouseIdGet200Response{}
	return &this
}

// GetFlats returns the Flats field value
func (o *HouseIdGet200Response) GetFlats() []Flat {
	if o == nil {
		var ret []Flat
		return ret
	}

	return o.Flats
}

// GetFlatsOk returns a tuple with the Flats field value
// and a boolean to check if the value has been set.
func (o *HouseIdGet200Response) GetFlatsOk() ([]Flat, bool) {
	if o == nil {
		return nil, false
	}
	return o.Flats, true
}

// SetFlats sets field value
func (o *HouseIdGet200Response) SetFlats(v []Flat) {
	o.Flats = v
}

func (o HouseIdGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HouseIdGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["flats"] = o.Flats
	return toSerialize, nil
}

func (o *HouseIdGet200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"flats",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHouseIdGet200Response := _HouseIdGet200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHouseIdGet200Response)

	if err != nil {
		return err
	}

	*o = HouseIdGet200Response(varHouseIdGet200Response)

	return err
}

type NullableHouseIdGet200Response struct {
	value *HouseIdGet200Response
	isSet bool
}

func (v NullableHouseIdGet200Response) Get() *HouseIdGet200Response {
	return v.value
}

func (v *NullableHouseIdGet200Response) Set(val *HouseIdGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableHouseIdGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableHouseIdGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHouseIdGet200Response(val *HouseIdGet200Response) *NullableHouseIdGet200Response {
	return &NullableHouseIdGet200Response{value: val, isSet: true}
}

func (v NullableHouseIdGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHouseIdGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
