/*
Тестовое задание для отбора на Backend Bootcamp

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Flat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Flat{}

// Flat Квартира
type Flat struct {
	// Идентификатор квартиры
	Id int32 `json:"id"`
	// Идентификатор дома
	HouseId int32 `json:"house_id"`
	// Цена квартиры в у.е.
	Price int32 `json:"price"`
	// Количество комнат в квартире
	Rooms  int32  `json:"rooms"`
	Status Status `json:"status"`
}

type _Flat Flat

// NewFlat instantiates a new Flat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlat(id int32, houseId int32, price int32, rooms int32, status Status) *Flat {
	this := Flat{}
	this.Id = id
	this.HouseId = houseId
	this.Price = price
	this.Rooms = rooms
	this.Status = status
	return &this
}

// NewFlatWithDefaults instantiates a new Flat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlatWithDefaults() *Flat {
	this := Flat{}
	return &this
}

// GetId returns the Id field value
func (o *Flat) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Flat) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Flat) SetId(v int32) {
	o.Id = v
}

// GetHouseId returns the HouseId field value
func (o *Flat) GetHouseId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HouseId
}

// GetHouseIdOk returns a tuple with the HouseId field value
// and a boolean to check if the value has been set.
func (o *Flat) GetHouseIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HouseId, true
}

// SetHouseId sets field value
func (o *Flat) SetHouseId(v int32) {
	o.HouseId = v
}

// GetPrice returns the Price field value
func (o *Flat) GetPrice() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *Flat) GetPriceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *Flat) SetPrice(v int32) {
	o.Price = v
}

// GetRooms returns the Rooms field value
func (o *Flat) GetRooms() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Rooms
}

// GetRoomsOk returns a tuple with the Rooms field value
// and a boolean to check if the value has been set.
func (o *Flat) GetRoomsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rooms, true
}

// SetRooms sets field value
func (o *Flat) SetRooms(v int32) {
	o.Rooms = v
}

// GetStatus returns the Status field value
func (o *Flat) GetStatus() Status {
	if o == nil {
		var ret Status
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Flat) GetStatusOk() (*Status, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Flat) SetStatus(v Status) {
	o.Status = v
}

func (o Flat) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Flat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["house_id"] = o.HouseId
	toSerialize["price"] = o.Price
	toSerialize["rooms"] = o.Rooms
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *Flat) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"house_id",
		"price",
		"rooms",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFlat := _Flat{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFlat)

	if err != nil {
		return err
	}

	*o = Flat(varFlat)

	return err
}

type NullableFlat struct {
	value *Flat
	isSet bool
}

func (v NullableFlat) Get() *Flat {
	return v.value
}

func (v *NullableFlat) Set(val *Flat) {
	v.value = val
	v.isSet = true
}

func (v NullableFlat) IsSet() bool {
	return v.isSet
}

func (v *NullableFlat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlat(val *Flat) *NullableFlat {
	return &NullableFlat{value: val, isSet: true}
}

func (v NullableFlat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
