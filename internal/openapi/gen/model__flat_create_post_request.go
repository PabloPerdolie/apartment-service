/*
Тестовое задание для отбора на Backend Bootcamp

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FlatCreatePostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlatCreatePostRequest{}

// FlatCreatePostRequest struct for FlatCreatePostRequest
type FlatCreatePostRequest struct {
	// Идентификатор дома
	HouseId int32 `json:"house_id"`
	// Цена квартиры в у.е.
	Price int32 `json:"price"`
	// Количество комнат в квартире
	Rooms *int32 `json:"rooms,omitempty"`
}

type _FlatCreatePostRequest FlatCreatePostRequest

// NewFlatCreatePostRequest instantiates a new FlatCreatePostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlatCreatePostRequest(houseId int32, price int32) *FlatCreatePostRequest {
	this := FlatCreatePostRequest{}
	this.HouseId = houseId
	this.Price = price
	return &this
}

// NewFlatCreatePostRequestWithDefaults instantiates a new FlatCreatePostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlatCreatePostRequestWithDefaults() *FlatCreatePostRequest {
	this := FlatCreatePostRequest{}
	return &this
}

// GetHouseId returns the HouseId field value
func (o *FlatCreatePostRequest) GetHouseId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HouseId
}

// GetHouseIdOk returns a tuple with the HouseId field value
// and a boolean to check if the value has been set.
func (o *FlatCreatePostRequest) GetHouseIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HouseId, true
}

// SetHouseId sets field value
func (o *FlatCreatePostRequest) SetHouseId(v int32) {
	o.HouseId = v
}

// GetPrice returns the Price field value
func (o *FlatCreatePostRequest) GetPrice() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *FlatCreatePostRequest) GetPriceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *FlatCreatePostRequest) SetPrice(v int32) {
	o.Price = v
}

// GetRooms returns the Rooms field value if set, zero value otherwise.
func (o *FlatCreatePostRequest) GetRooms() int32 {
	if o == nil || IsNil(o.Rooms) {
		var ret int32
		return ret
	}
	return *o.Rooms
}

// GetRoomsOk returns a tuple with the Rooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlatCreatePostRequest) GetRoomsOk() (*int32, bool) {
	if o == nil || IsNil(o.Rooms) {
		return nil, false
	}
	return o.Rooms, true
}

// HasRooms returns a boolean if a field has been set.
func (o *FlatCreatePostRequest) HasRooms() bool {
	if o != nil && !IsNil(o.Rooms) {
		return true
	}

	return false
}

// SetRooms gets a reference to the given int32 and assigns it to the Rooms field.
func (o *FlatCreatePostRequest) SetRooms(v int32) {
	o.Rooms = &v
}

func (o FlatCreatePostRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlatCreatePostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["house_id"] = o.HouseId
	toSerialize["price"] = o.Price
	if !IsNil(o.Rooms) {
		toSerialize["rooms"] = o.Rooms
	}
	return toSerialize, nil
}

func (o *FlatCreatePostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"house_id",
		"price",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFlatCreatePostRequest := _FlatCreatePostRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFlatCreatePostRequest)

	if err != nil {
		return err
	}

	*o = FlatCreatePostRequest(varFlatCreatePostRequest)

	return err
}

type NullableFlatCreatePostRequest struct {
	value *FlatCreatePostRequest
	isSet bool
}

func (v NullableFlatCreatePostRequest) Get() *FlatCreatePostRequest {
	return v.value
}

func (v *NullableFlatCreatePostRequest) Set(val *FlatCreatePostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFlatCreatePostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFlatCreatePostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlatCreatePostRequest(val *FlatCreatePostRequest) *NullableFlatCreatePostRequest {
	return &NullableFlatCreatePostRequest{value: val, isSet: true}
}

func (v NullableFlatCreatePostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlatCreatePostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
